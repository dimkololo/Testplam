// Telegram WebApp (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
if (window.Telegram && window.Telegram.WebApp) {
  try { window.Telegram.WebApp.expand(); } catch(e) {}
}

// –ú–æ–¥–∞–ª–∫–∞
const modalRoot = document.querySelector('[data-modal-root]');
const modalContent = document.querySelector('[data-modal-content]');

const ScrollLock = {
  lock(){ document.documentElement.style.overflow = 'hidden'; },
  unlock(){ document.documentElement.style.overflow = ''; }
};

function openModal(id){
  const tpl = document.getElementById(`tpl-${id}`);
  if(!tpl) return;
  modalContent.innerHTML = '';
  modalContent.appendChild(tpl.content.cloneNode(true));
  modalRoot.hidden = false;
  modalRoot.setAttribute('aria-hidden','false');
  ScrollLock.lock();
  if(id === 'upload-popup') initUploadPopup();
}
function closeModal(){
  modalRoot.hidden = true;
  modalRoot.setAttribute('aria-hidden','true');
  modalContent.innerHTML = '';
  ScrollLock.unlock();
}

document.addEventListener('click', (e) => {
  const opener = e.target.closest('[data-open-modal]');
  if (opener) { openModal(opener.getAttribute('data-open-modal')); return; }
  if (e.target.matches('[data-dismiss]') || e.target.closest('[data-dismiss]')) closeModal();
});
document.addEventListener('keydown', (e) => {
  if (e.key === 'Escape' && !modalRoot.hidden) closeModal();
});

// –ü–æ–ø–∞–ø ‚Ññ1
const root = document.body; // –∏–ª–∏ –¥—Ä—É–≥–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä, –µ—Å–ª–∏ —à–∞–±–ª–æ–Ω –≤—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
const template = document.getElementById('tpl-upload-popup');
const popup = template.content.cloneNode(true);
root.appendChild(popup);

// –≠–ª–µ–º–µ–Ω—Ç—ã
const form = root.querySelector('[data-upload-form]');
const fileInput = root.querySelector('#file-input');
const range = root.querySelector('.range');
const starsEl = root.querySelector('[data-stars]');
const secsEl = root.querySelector('[data-secs]');

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–∏ –¥–≤–∏–∂–µ–Ω–∏–∏ —Å–ª–∞–π–¥–µ—Ä–∞
const plural = (n, one, many) => (n === 1 ? one : many);
if (range && starsEl && secsEl) {
  const update = () => {
    const v = parseInt(range.value, 10);
    starsEl.textContent = `${v} ${plural(v, 'PLAMc', 'PLAMc')}`;
    secsEl.textContent = `${v} —Å–µ–∫`;
  };
  range.addEventListener('input', update);
  update();
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
form.addEventListener('submit', async (e) => {
  e.preventDefault();

  const file = fileInput.files[0];
  if (!file) {
    alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ —Ñ–æ—Ç–æ üì∏');
    return;
  }

  const formData = new FormData();
  formData.append('photo', file);
  formData.append('social', form.social.value);
  formData.append('desc', form.desc.value);
  formData.append('secs', range.value);

  try {
    const response = await fetch('https://your-server.vercel.app/api/upload', {
      method: 'POST',
      body: formData
    });

    const result = await response.json();
    alert(result.message || '–§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!');
  } catch (err) {
    console.error(err);
    alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ üò¢');
  }
});
console.log('App ready');
